package com.experion.service;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;

import com.experion.entity.Card;
import com.experion.entity.Product;

public class Service {
	
	
	
	public static Product createCardProduct()
	{
		Scanner scanner = new Scanner(System.in);
		System.out.println("Enter Product Code : ");
		String productCode = scanner.nextLine();
		System.out.println("Enter Product Name : ");
		String productName = scanner.nextLine();
		System.out.println("Enter Product Type : ");
		String productType = scanner.nextLine();
		System.out.println("Enter Card Type : ");
		String cardType = scanner.nextLine();
		scanner.nextLine();
		Card card = new Card(productCode, productName,productType, cardType);
		return card;
		 
	}
	
	public static void displayProductDetails(ArrayList<Product> products)
	{
		System.out.println("Sl.no		Product Code		Product Name		Product Description		Product Price"
				+ "		Open Date		Validity Date		Expiry Date");
		DateFormat dateFor = new SimpleDateFormat("dd/MM/yyyy");
		for(Product product : products) {
		if(product!=null) {
		System.out.println(product.getSerialNoOriginal()+"			"+product.getProductCode()+"			"+product.getProductName()
		+"			"+product.getProductDescription()+"			"+product.getProductPrice()+"			"+dateFor.format(product.getOpenDate())
		+"			"+dateFor.format(product.getValidityDate())+"			"+dateFor.format(product.getExpiryDate()));
	}}}
	

	public static void buyProduct(ArrayList<Product> productList) throws ParseException
	{
		Scanner scanner = new Scanner(System.in);
		System.out.println("Enter the product number :");
		int productChoice = scanner.nextInt();
		DateFormat dateFor = new SimpleDateFormat("dd/MM/yyyy");
		System.out.println("Sl.no			Product Code			Product Name			Product Description			Product Price"
				+ "			Open Date			Validity Date			Expiry Date");
		
		for(Product product : productList) {
			int productNo = product.getSerialNoOriginal();
			if(productNo == productChoice) {
				
				System.out.println(product.getSerialNoOriginal()+"			"+product.getProductCode()+"			"+product.getProductName()
				+"			"+product.getProductDescription()+"			"+product.getProductPrice()+"			"+dateFor.format(product.getOpenDate())
				+"			"+dateFor.format(product.getValidityDate())+"			"+dateFor.format(product.getExpiryDate()));
				System.out.println();
				Date openDate = dateFor.parse(dateFor.format(product.getOpenDate()));
				Date validityDate=dateFor.parse(dateFor.format(product.getValidityDate()));
				Date expiryDate=dateFor.parse(dateFor.format(product.getExpiryDate()));
				Date localDate = dateFor.parse(dateFor.format(new Date()));
				
				if(expiryDate.before(localDate))
				{
					System.out.println("The product is expired.....Sorry!!!");
				}
				else if(openDate.before(localDate) || openDate.equals(localDate)){
					if(validityDate.after(localDate) || validityDate.equals(localDate)){
						System.out.println("The product is Active, you can buy.....");
					}
					else {
						System.out.println("The product is Inactive");
					}
				}
				else {
					System.out.println("The product is not in sale...Will be back soon...");
				}
			}}
	}
	}
