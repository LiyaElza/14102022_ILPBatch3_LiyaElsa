package com.experion.service;

import java.util.ArrayList;
import java.util.Scanner;

import com.experion.entity.Account;
import com.experion.entity.CurrentAccount;
import com.experion.entity.Customer;
import com.experion.entity.LoanAccount;
import com.experion.entity.Product;
import com.experion.entity.SavingsMaxAccount;

public class BankServices {

	String serviceCode;
	String serviceName;

	public BankServices() {

	}

	public BankServices(String serviceCode, String serviceName) {
		super();
		this.serviceCode = serviceCode;
		this.serviceName = serviceName;
	}

	public String getServiceCode() {
		return serviceCode;
	}

	public void setServiceCode(String serviceCode) {
		this.serviceCode = serviceCode;
	}

	public String getServiceName() {
		return serviceName;
	}

	public void setServiceName(String serviceName) { // Adding services to the product
		this.serviceName = serviceName;
	}
	Scanner scanner = new Scanner(System.in);

	public ArrayList<BankServices> addBankServices(String accountType) {
		ArrayList<BankServices> bankServices = new ArrayList<BankServices>();
		if (accountType == "SavingsMaxAccount") {
			bankServices.add(new BankServices("b1", "CashDeposit"));
			bankServices.add(new BankServices("b2", "ATMWithdrawal"));
			bankServices.add(new BankServices("b3", "OnlineBanking"));
		} else if (accountType == "CurrentAccount") {
			bankServices.add(new BankServices("b1", "CashDeposit"));
			bankServices.add(new BankServices("b2", "ATMWithdrawal"));
			bankServices.add(new BankServices("b3", "OnlineBanking"));
			bankServices.add(new BankServices("b4", "MobileBanking"));
		} else if (accountType == "LoanAccount") {
			bankServices.add(new BankServices("b1", "CashDeposit"));
			bankServices.add(new BankServices("b5", "ChequeDeposit"));
		}
		return bankServices;
	}

	public ArrayList<Customer> maxAccountService(ArrayList<Customer> customers, String customerCodeEnter) { //Services for ServiceMaxAccount
		// TODO Auto-generated method stub
		char continueChoice;
		int serviceChoice;
		ArrayList<Product> products = new ArrayList<Product>() ;
		Account account = null;
		for(Customer customer : customers)
		{
			if(customer.getCustomerId().equalsIgnoreCase(customerCodeEnter))
			{
				products=customer.getProduct();
			}
		}
		int accountCount=0;
		String accountCode = null;
		for(Product accountTemp: products)   //in case a customer posses two accounts of same type
		{
			if(accountTemp.getProductType().equalsIgnoreCase("SavingsMaxAccount"))
				accountCount++;
		}
		if(accountCount>1) {
			System.out.println("Enter Account Code");
			accountCode=scanner.nextLine();
			for(Product product: products)
			{
				if(product.getProductType().equalsIgnoreCase("SavingsMaxAccount") && accountCode.equalsIgnoreCase(product.getProductCode())) {
					Account accountTemp=(Account)product;
					account=accountTemp;}
			}
		}
		else {
			for(Account accountTemp: products)
			{
				if(accountTemp.getProductType().equalsIgnoreCase("SavingsMaxAccount"))
					account=accountTemp;
			}
		}
		do {
			
			System.out.println("1.Cash Deposit\n2.ATM Withdrawal\n3.Online Banking\n4.Display Account Details");
			serviceChoice=scanner.nextInt();
			switch(serviceChoice)
			{
			case 1 : SavingsMaxAccount saveMax = (SavingsMaxAccount) account;
					account=saveMax.cashDeposit(account);
				break;
			case 2 : SavingsMaxAccount saveMax2 = (SavingsMaxAccount) account;
					account=saveMax2.atmWithdrawal(account);
				break;
			case 3 : SavingsMaxAccount saveMax3 = (SavingsMaxAccount) account;
				account=saveMax3.onlineBanking(account);
				break;
			case 4 : System.out.println("Account Code		Account Type		Account Balance");
					System.out.println(account.getProductCode()+"		"+account.getProductType()+"		"+account.getAccountBalance());
				break;
			default : System.out.println("Invalid Selection");
			}
			System.out.println("Do you want to continue in this service(y/n)");
			continueChoice=scanner.next().charAt(0);
			
		}while(continueChoice=='y');
		return customers;
	}

	public ArrayList<Customer> currentAccountService(ArrayList<Customer> customers, String customerCodeEnter) { //services for current account
		// TODO Auto-generated method stub
		char continueChoice;
		int serviceChoice;
		ArrayList<Account> accounts = new ArrayList<Account>() ;
		Account account = null;
		for(Customer customer : customers)
		{
			if(customer.getCustomerId().equalsIgnoreCase(customerCodeEnter))
			{
				accounts=customer.getAccount();
			}
		}

		int accountCount=0;  
		String accountCode = null;
		for(Account accountTemp: accounts) //in case a customer posses two accounts of same type
		{
			if(accountTemp.getProductType().equalsIgnoreCase("CurrentAccount"))
				accountCount++;
		}
		if(accountCount>1) {
			System.out.println("Enter Account Code");
			accountCode=scanner.nextLine();
			for(Account accountTemp: accounts)
			{
				if(accountTemp.getProductType().equalsIgnoreCase("CurrentAccount") && accountCode.equalsIgnoreCase(accountTemp.getProductCode()))
					account=accountTemp;
			}
		}
		else {
			for(Account accountTemp: accounts)
			{
				if(accountTemp.getProductType().equalsIgnoreCase("CurrentAccount"))
					account=accountTemp;
			}
		}
		do {
			
			System.out.println("1.Cash Deposit\n2.ATM Withdrawal\n3.Mobile Banking\n4.Online Banking\n5Display Account Details");
			serviceChoice=scanner.nextInt();
			switch(serviceChoice)
			{
			case 1 : CurrentAccount current = new CurrentAccount();
					account=current.cashDeposit(account);
				break;
			case 2 : CurrentAccount current2 = new CurrentAccount();
					account=current2.atmWithdrawal(account);
				break;
			case 3 : CurrentAccount current3 = new CurrentAccount();
					account=current3.mobileBanking(account);
					break;
			case 4 : CurrentAccount current4 = new CurrentAccount();
					account=current4.onlineBanking(account);
					break;
			case 5 : System.out.println("Account Code		Account Type		Account Balance");
					System.out.println(account.getProductCode()+"		"+account.getProductType()+"		"+account.getAccountBalance());
					break;
			default : System.out.println("Invalid Selection");
			}
			System.out.println("Do you want to continue in this service (y/n");
			continueChoice=scanner.next().charAt(0);
			
		}while(continueChoice=='y');
		return customers;
		
	}

	public ArrayList<Customer> loanAccountService(ArrayList<Customer> customers, String customerCodeEnter) { //services for Loan Account
		// TODO Auto-generated method stub
		char continueChoice;
		int serviceChoice;
		ArrayList<Account> accounts = new ArrayList<Account>() ;
		Account account = null;
		for(Customer customer : customers)
		{
			if(customer.getCustomerId().equalsIgnoreCase(customerCodeEnter))
			{
				accounts=customer.getAccount();
			}
		}

		int accountCount=0;  
		String accountCode = null;
		for(Account accountTemp: accounts) //in case a customer posses two accounts of same type
		{
			if(accountTemp.getProductType().equalsIgnoreCase("LoanAccount"))
				accountCount++;
		}
		if(accountCount>1) {
			System.out.println("Enter Account Code");
			accountCode=scanner.nextLine();
			for(Account accountTemp: accounts)
			{
				if(accountTemp.getProductType().equalsIgnoreCase("LoanAccount") && accountCode.equalsIgnoreCase(account.getProductCode()))
					account=accountTemp;
			}
		}
		else {
			for(Account accountTemp: accounts)
			{
				if(accountTemp.getProductType().equalsIgnoreCase("LoanAccount"))
					account=accountTemp;
			}
		}
		
		do {
			System.out.println("Select an one of the services");
			System.out.println("1.Cash Deposit\n2.Cheque Deposit\n3.Display Account Deails");
			serviceChoice=scanner.nextInt();
			switch(serviceChoice)
			{
			case 1 : LoanAccount loan = new LoanAccount();
					account=loan.cashDeposit(account);
				break;
			case 2 : LoanAccount loan2 = new LoanAccount();
					account=loan2.chequeDeposit(account);
				break;
			case 3 : System.out.println("Account Code		Account Type		Account Balance");
					System.out.println(account.getProductCode()+"		"+account.getProductType()+"		"+account.getAccountBalance());
				break;
			default : System.out.println("Invalid Selection");
			}
			System.out.println("Do you want to continue in this service (y/n)");
			continueChoice=scanner.next().charAt(0);
			
		}while(continueChoice=='y');
		return customers;
		
	}
	
	

}
